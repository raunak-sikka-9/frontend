#!/usr/bin/env node
var FilePreviews = require('../lib/'),
    program = require('commander'),
    url = require('valid-url'),
    version = require('../package.json').version;

program
  .version(version);

program
  .option('-D, --debug', 'Enable debug logging.')
  .option('-V, --version', 'Show version.')
  .option('-K, --apiKey [key]', 'Use FilePreviews.io application API Key')
  .option('-S, --apiSecret [key]', 'Use FilePreviews.io application API Secret Key');

program
  .command('generate <url>')
  .option('-m, --metadata [values]', 'Eg: exif,ocr,psd,all')
  .option('-f, --format [values]', 'Eg: png, jpg')
  .option('-h, --height [value]', 'Height value')
  .option('-w, --width [value]', 'Width value')
  .action(function(fileURL) {
    var options = {};

    if (program.metadata) {
      options.metadata = program.metadata.split(',');
    }

    if (program.height || program.width) {
      options.size = {};
      if (program.height) {
        options.size.height = program.height;
      }
      if (program.width) {
        options.size.width = program.width;
      }
    }

    if (program.format) {
      options.format = program.format;
    }

    if (url.isWebUri(fileURL)) {
      var preview = new FilePreviews({
        debug: program.debug,
        apiKey: program.apiKey,
        apiSecret: program.apiSecret
      });

      preview.generate(fileURL, options, function(err, result) {
        console.log(JSON.stringify(result, null, ' '));
      });
    } else {
      console.error('Invalid URL');
    }
  });

program
  .command('retrieve <preview_id>')
  .action(function(previewId) {
    var preview = new FilePreviews({
      debug: program.debug,
      apiKey: program.apiKey,
      apiSecret: program.apiSecret
    });

    preview.retrieve(previewId, function(err, result) {
      console.log(JSON.stringify(result, null, ' '));
    });
  });

program.parse(process.argv);
